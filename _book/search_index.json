[
["intro.html", "Chapter 2 Introduction 2.1 Introduction to R 2.2 The Basics 2.3 Assignment 2.4 Evaluation 2.5 Operators 2.6 Using R Help 2.7 Data Types 2.8 Determining Data Types 2.9 Packages 2.10 Plotting 2.11 Example: Putting it all (and some more) together", " Chapter 2 Introduction 2.1 Introduction to R R is a open-source, freely available statistical programming language. R Studio is the most commonly used interface to R. Originally developed at Bell Labs in the 1980s as the S programming language. Modular, most of the functionality is in code libraries called packages.. Literate programming and reproducible research with knitr and markdown. 2.2 The Basics You can think of R as a really fancy calculator, with a great way of handling data. The main interaction happens in the source code window (by marking code, and pressing Ctrl+R or Apple+R), and on the R console. Addition &gt; 2+1 ## [1] 3 Subtraction &gt; 2-1 ## [1] 1 Multiplication &gt; 2*3 ## [1] 6 Division &gt; 2/3 ## [1] 0.6666667 Exponentiation &gt; 2^3 ## [1] 8 2.3 Assignment Values can be stored in variables, which have to be named. You might remember the concept from math; the \\(x\\) in \\(2 = 0.5*x\\) is a variable name. Variables are created implicitly, by being assigned a value. This is done using the R assignment operator: &lt;-. For example, let’s assign 2 to var_name: &gt; var_name &lt;- 2 Now, let’s save the result of a complex expression … &gt; my_variable &lt;- (11 - 1)^2 &gt; my_other_variable &lt;- 10^2 … and retrieve it later … &gt; my_variable ## [1] 100 … or combine with other variables &gt; my_variable + my_other_variable ## [1] 200 2.4 Evaluation Every expression evaluates to a value. R displays the value an expression evaluates to for almost every expression except assignment. The result of the addition is shown: &gt; 1+1 ## [1] 2 For the assignment, nothing is shown: &gt; x &lt;- 1 2.5 Operators Variables or expressions can be compared with others. - The operator ‘==’ tests for equality: &gt; my_variable == my_other_variable ## [1] TRUE The operator ‘!=’ tests for inequality: &gt; my_variable != my_other_variable ## [1] FALSE Don’t confuse ‘==’ with ‘=’. The latter performs assignment (just like ‘&lt;-’): &gt; x = 1 Variables or expressions can be compared with others. - What do you think ‘&lt;’, ‘&gt;’, ‘&lt;=’, and ‘=&gt;’ test for? &gt; my_other_variable == 100 ## [1] TRUE &gt; my_other_variable &lt; 100 ## [1] FALSE &gt; my_other_variable &lt;= 100 ## [1] TRUE 2.6 Using R Help Let’s say you forgot the difference between ‘=’, ‘==’, and ‘&lt;-’. &gt; help(&quot;&lt;-&quot;) &gt; help(&quot;=&quot;) &gt; help(&quot;==&quot;) &gt; help(&quot;glm&quot;) 2.7 Data Types In R, variables have types: Data Type Examples Integer (Numeric): …, -3, -2, -1, 0, +1, +2, +3, … Double (Numeric): most rational numbers; e.g., 1.0, 1.5, 20.0, pi Character: \"a\", \"b\", \"word\", \"hello dear friend, ...\" Logical: TRUE or FALSE (or: T or F ) Factor: Restricted, user-defined set of values, internally represented numerically (e.g., Gender {‘male’, ‘female’, ‘other’}) Ordered factor: Factor with an ordering (e.g., Starbucks coffee sizes {‘venti’ &gt; ‘grande’ &gt; ‘tall’}) &gt; my_apples &lt;- 1 &gt; my_oranges &lt;- &quot;one&quot; Types matter when comparing: &gt; my_apples == my_oranges ## [1] FALSE Types also matter for other operations. &gt; my_apples &lt;- 1 &gt; my_oranges &lt;- &quot;1.1&quot; &gt; my_apples + my_oranges ## Error in my_apples + my_oranges: non-numeric argument to binary operator &gt; my_apples + as.double(my_oranges) ## [1] 2.1 2.8 Determining Data Types When unsure, we can ask R about the type of a variable: &gt; my_apples &lt;- 1 &gt; my_oranges &lt;- &quot;1.1&quot; &gt; typeof(my_apples) ## [1] &quot;double&quot; &gt; typeof(my_oranges) ## [1] &quot;character&quot; &gt; typeof(as.double(my_oranges)) ## [1] &quot;double&quot; 2.9 Packages Most of R’s functionality is located in packages contributed by users. In this course, we will use the plotting functionality of ggplot2. &gt; # install ggplot2 &gt; install.packages(&quot;ggplot2&quot;) &gt; # install other packages we will use in this course &gt; install.packages(c(&quot;tidyverse&quot;, &quot;magrittr&quot;, &quot;Hmisc&quot;)) &gt; &gt; # load ggplot2 &gt; library(ggplot2) Some important functions in R are located in packages. For example, the function recode substitutes values by others. Let’s take a look at the function recode in the package dplyr (dplyr::recode, in R lingo). &gt; # Let&#39;s define a vector with my favorite fruits &gt; my_favorite_fruit &lt;- c(&quot;apples&quot;, &quot;pears&quot;, &quot;ornges&quot;, &quot;mangoes&quot;) &gt; &gt; # Oh no, I made a typo - it should be &#39;oranges&#39;, not &#39;ornges&#39; &gt; # Let&#39;s replace it, using the function dplyr::recode &gt; dplyr::recode(my_favorite_fruit, &#39;ornges&#39;=&#39;oranges&#39;) ## [1] &quot;apples&quot; &quot;pears&quot; &quot;oranges&quot; &quot;mangoes&quot; &gt; # As an alternative way of doing the same thing, &gt; # we can first load the package to gain access &gt; # to all of its functions. &gt; library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union &gt; # Having done this, we can just call this function and all &gt; # the other functions in directly, without the `dplyr::` &gt; # prefix. &gt; recode(my_favorite_fruit, &#39;ornges&#39;=&#39;oranges&#39;) ## [1] &quot;apples&quot; &quot;pears&quot; &quot;oranges&quot; &quot;mangoes&quot; 2.10 Plotting One of the great things about R, is that it contains the package ggplot2, which produces pretty decent graphics with relatively little effort. &gt; # Load the ggplot2 package. &gt; library(ggplot2) &gt; &gt; # create a vector of the numbers from 1 to 10 &gt; x &lt;- 1:10 &gt; # now, create a vector of their squares &gt; y &lt;- x^2 &gt; &gt; # Create a scatterplot of x ~ y, and draw the best fit quadratic function line though them &gt; ggplot(data=NULL, aes(x, y)) + + geom_point() + + geom_smooth(method = &quot;lm&quot;, formula = y~x + I(x^2) ) 2.11 Example: Putting it all (and some more) together Let’s try to understand the Starbucks pricing system. Here is how we get our data into R. &gt; # store size labels in a vector &gt; label &lt;- c(&#39;tall&#39;, &#39;grande&#39;, &#39;venti&#39;) &gt; # make it an ordered vector &gt; label &lt;- ordered(label, c(&#39;tall&#39;, &#39;grande&#39;, &#39;venti&#39;)) &gt; &gt; # store sizes in ounces in a vector &gt; size_oz &lt;- c(12, 16, 20) &gt; &gt; # store cafe latte prices in a vector; prices probably not up to date &gt; price_tl &lt;- c(8.50, 9.75, 11.00) &gt; &gt; df_starbucks_coffee &lt;- data.frame(label, size_oz, price_tl) &gt; df_starbucks_coffee ## label size_oz price_tl ## 1 tall 12 8.50 ## 2 grande 16 9.75 ## 3 venti 20 11.00 &gt; library(ggplot2) &gt; &gt; # plot cup size by size category, use a bar plot; &gt; ggplot(df_starbucks_coffee, aes(label, size_oz)) + geom_bar(stat = &quot;identity&quot;) &gt; # plot cup size by price, use a scatterplot; draw a line through the points &gt; ggplot(df_starbucks_coffee, aes(price_tl, size_oz)) + geom_point() + geom_smooth(method = &quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; 2.11.1 How much would other coffee sizes cost if Starbucks introduced them? &gt; # plot cup size by price, use a scatterplot; draw a line through the points &gt; ggplot(df_starbucks_coffee, aes(price_tl, size_oz)) + geom_point() + geom_smooth(method = &quot;lm&quot;, fullrange=TRUE) + scale_x_continuous(limits = c(3, 15)) + scale_y_continuous(limits = c(-3, 25)) ## `geom_smooth()` using formula &#39;y ~ x&#39; ## Warning: Removed 23 rows containing missing values (geom_smooth). Does this plot even make sense? Why not? … The above plot isn’t the most intuitive way to visualize the price-coffee size relationship, because we tend to interpret such plots in terms of ‘a change of a certain number of units on the x-axis leads to a change of a certain number of units on the y-axis’. In the above case, this means that ‘if I choose to pay approximately 5 lira, I’ll get 0 ounces of coffee’, or ‘if I choose to pay 4 lira, I’ll get -2.5 ounces of coffee’. This is of course nonsensical. 2.11.2 How much would other coffee sizes cost if Starbucks introduced them? A second attempt Flipping the coordinates, with coffee size on the x-axis, and price on the y-axis makes it easier to see that the only useful part of the plot is where the coffee size is larger than \\(0\\), since you’d never ask yourself the question ‘How much would I need to pay, in order to give Starbucks 1 ounce of coffee?’. &gt; # plot cup size by price, use a scatterplot; draw a line through the points &gt; ggplot(df_starbucks_coffee, aes(size_oz, price_tl)) + geom_point() + geom_smooth(method = &quot;lm&quot;, fullrange=TRUE) + scale_x_continuous(limits = c(-1, 25)) + scale_y_continuous(limits = c(0, 15)) ## `geom_smooth()` using formula &#39;y ~ x&#39; "]
]
